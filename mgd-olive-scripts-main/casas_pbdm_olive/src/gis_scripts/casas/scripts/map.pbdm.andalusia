#!/bin/sh

############################################################################
#
# MODULE:       map.pbdm.andalusia (Windows native version)
#
# AUTHOR(S):    Luigi Ponti quartese gmail com
#
# PURPOSE:      Import ASCII ouput files from CASAS models
#                      to a GRASS monitor after interpolation and
#                      save the map to an image file (currently png).
#
# NOTE:         This version supports outfiles with names of
#                       type "Olive_02Mar06_00003.txt".
#                       
#				Updates:
#				2017-05-22 Added ability to zoom to a subset of countries
#                       (or e.g., provinces), either with or without clipping
#                       to crop growing extent.
#				2019-08-30 Added ability to use tomato (or other crops)
#						for clipping model output as a multiple choice
#						option. Works for entire region or subset of 
#						countries.
#				2019-09-28 Added ability to modify extent of crop growing
#						area used for clipping model output based on a
#						threshold for crop harvested area fraction above 
#                       which mapping will occur. Works for entire region
#                       or subset of countries.
#				2021-04-14 Added ability to map area of olive monocolture
#						from SIGPAC 2018 database by Junta de Andalucia 
#				2021-04-19 Added ability to perform statistics on SIGPAC 2018
#						original area and to save raster output as GeoTIFF

#
# COPYRIGHT:    (c) 2005-2021 CASAS Global (Center for the Analysis
#                       of Sustainable Agricultural Systems Global
#                       http://www.casasglobal.org/).
#
#		This program is free software under the GNU General Public
#		License (>=v2). Read the file COPYING that comes with GRASS
#		for details.
#
############################################################################

#%Module
#%  description: Map and analyze the output of CASAS Global physiologically based demographic models (CASAS-PBDMs) for Andalusia provinces using GRASS GIS
#%  keywords: MED-GOLD project, GRASS GIS, physiologically based demographic, models (PBDM), olive, agroecosystem analysis
#%End 

#%option
#% guisection: Main
#% key: SaveDir
#% type: string
#% description: Name for directory where to store output maps
#% required: yes
#%end

#%option
#% guisection: Main
#% key: longitude
#% type: integer
#% answer: 5
#% description: Longitude (X) column number
#% required: yes
#%end

#%option
#% guisection: Main
#% key: latitude
#% type: integer
#% answer: 6
#% description: Latitude (Y) column number
#% required: yes
#%end

#%option
#% guisection: Main
#% key: year
#% type: integer
#% answer: 11
#% description: Year column number 
#% required: yes
#%end

#%option
#% guisection: Main
#% key: parameter
#% type: integer
#% description: Parameter to map
#% required : yes
#%end

#%option
#% guisection: Main
#% key: interpolation
#% type: string
#% options: idw,bspline
#% answer: idw
#% description: Interpolation method
#% required : yes
#%end

#%option
#% guisection: Main
#% key: numpoints
#% type: integer
#% answer: 3
#% description: Number of interpolation points (only used with interpolation method IDW)
#% required : yes
#%end

#%option
#% guisection: Main
#% key: legend1
#% type: string
#% description: Text for legend - first line (file name of HTML summary)
#% required: yes
#%end

#%option
#% guisection: Color rules
#% key: colorRuleDivergent
#% type: string
#% answer: 32:96:255-32:159:255-32:191:255-0:207:255-42:255:255-85:255:255-127:255:255-170:255:255-255:255:84-255:240:0-255:191:0-255:168:0-255:138:0-255:112:0-255:77:0-255:0:0
#% description: Select or input a DIVERGENT color pattern (hyphen-separated) using standard GRASS colors (see r.colors manual page for color names) or R:G:B triplets
#%end

#%option
#% guisection: Color rules
#% key: colorRuleRegular
#% type: string
#% answer: 48:18:59-50:21:67-51:24:74-52:27:81-53:30:88-54:33:95-55:36:102-56:39:109-57:42:115-58:45:121-59:47:128-60:50:134-61:53:139-62:56:145-63:59:151-63:62:156-64:64:162-65:67:167-65:70:172-66:73:177-66:75:181-67:78:186-68:81:191-68:84:195-68:86:199-69:89:203-69:92:207-69:94:211-70:97:214-70:100:218-70:102:221-70:105:224-70:107:227-71:110:230-71:113:233-71:115:235-71:118:238-71:120:240-71:123:242-70:125:244-70:128:246-70:130:248-70:133:250-70:135:251-69:138:252-69:140:253-68:143:254-67:145:254-66:148:255-65:150:255-64:153:255-62:155:254-61:158:254-59:160:253-58:163:252-56:165:251-55:168:250-53:171:248-51:173:247-49:175:245-47:178:244-46:180:242-44:183:240-42:185:238-40:188:235-39:190:233-37:192:231-35:195:228-34:197:226-32:199:223-31:201:221-30:203:218-28:205:216-27:208:213-26:210:210-26:212:208-25:213:205-24:215:202-24:217:200-24:219:197-24:221:194-24:222:192-24:224:189-25:226:187-25:227:185-26:228:182-28:230:180-29:231:178-31:233:175-32:234:172-34:235:170-37:236:167-39:238:164-42:239:161-44:240:158-47:241:155-50:242:152-53:243:148-56:244:145-60:245:142-63:246:138-67:247:135-70:248:132-74:248:128-78:249:125-82:250:122-85:250:118-89:251:115-93:252:111-97:252:108-101:253:105-105:253:102-109:254:98-113:254:95-117:254:92-121:254:89-125:255:86-128:255:83-132:255:81-136:255:78-139:255:75-143:255:73-146:255:71-150:254:68-153:254:66-156:254:64-159:253:63-161:253:61-164:252:60-167:252:58-169:251:57-172:251:56-175:250:55-177:249:54-180:248:54-183:247:53-185:246:53-188:245:52-190:244:52-193:243:52-195:241:52-198:240:52-200:239:52-203:237:52-205:236:52-208:234:52-210:233:53-212:231:53-215:229:53-217:228:54-219:226:54-221:224:55-223:223:55-225:221:55-227:219:56-229:217:56-231:215:57-233:213:57-235:211:57-236:209:58-238:207:58-239:205:58-241:203:58-242:201:58-244:199:58-245:197:58-246:195:58-247:193:58-248:190:57-249:188:57-250:186:57-251:184:56-251:182:55-252:179:54-252:177:54-253:174:53-253:172:52-254:169:51-254:167:50-254:164:49-254:161:48-254:158:47-254:155:45-254:153:44-254:150:43-254:147:42-254:144:41-253:141:39-253:138:38-252:135:37-252:132:35-251:129:34-251:126:33-250:123:31-249:120:30-249:117:29-248:114:28-247:111:26-246:108:25-245:105:24-244:102:23-243:99:21-242:96:20-241:93:19-240:91:18-239:88:17-237:85:16-236:83:15-235:80:14-234:78:13-232:75:12-231:73:12-229:71:11-228:69:10-226:67:10-225:65:9-223:63:8-221:61:8-220:59:7-218:57:7-216:55:6-214:53:6-212:51:5-210:49:5-208:47:5-206:45:4-204:43:4-202:42:4-200:40:3-197:38:3-195:37:3-193:35:2-190:33:2-188:32:2-185:30:2-183:29:2-180:27:1-178:26:1-175:24:1-172:23:1-169:22:1-167:20:1-164:19:1-161:18:1-158:16:1-155:15:1-152:14:1-149:13:1-146:11:1-142:10:1-139:9:2-136:8:2-133:7:2-129:6:2-126:5:2-122:4:3
#% description: Select or input a REGULAR color pattern (hyphen-separated) using standard GRASS colors (see r.colors manual page for color names) or R:G:B triplets
#%end

#%option
#% guisection: Color rules
#% key: lowBarCol
#% type: double
#% description: Lower limit for legend color bar when -w option is enabled
#%end

#%option
#% guisection: Color rules
#% key: upBarCol
#% type: double
#% description: Upper limit for legend color bar when -w option is enabled
#%end

#%flag
#% guisection: Color rules
#% key: w
#% description: Modify extent of legend color bar (using low and high input values)
#%end

#%flag
#% guisection: Color rules
#% key: g
#% description: Black and white output instead of color
#%end

#%flag
#% guisection: Color rules
#% key: e
#% description: Use histogram-equalized color rule
#%end

#%flag
#% guisection: Color rules
#% key: l
#% description: Logarithmic scaling
#%end

#%flag
#% guisection: Color rules
#% key: x
#% description: Use an overall (compound) range for all maps (absolute max and min)
#%end

#%flag
#% guisection: Color rules
#% key: a
#% description: Use also same legend bar for all maps (i.e. bar will extend to overall max and min)
#%end

#%flag
#% guisection: Color rules
#% key: d
#% description: Use divergent, zero-centered color pattern (requires positive max and negative min)
#%end

#%option
#% key: lowercut
#% type: double
#% answer: 0
#% description: Cutting point to mask low values
#% required: yes
#%end

#%option
#% key: uppercut
#% type: double
#% answer: 0
#% description: Cutting point to mask high values (please, also check option -u Use cutting point to mask high values)
#% required: yes
#%end

#%option
#% key: provinces
#% type: string
#% options: all,ES-CA,ES-H,ES-AL,ES-GR,ES-MA,ES-SE,ES-CO,ES-J
#% answer: all
#% description: Specify multiple provinces to map (comma separated). Use the word all to map them all. For provinces, use codes defined as follows: ES-CA=Cádiz, ES-H=Huelva, ES-AL=Almería, ES-GR=Granada, ES-MA=Málaga, ES-SE=Sevilla, ES-CO=Córdoba, ES-J=Jaén
#% multiple: yes
#% required: yes
#%end

#%option
#% key: crop
#% type: string
#% options: sigpac_buffered_3km,sigpac_buffered_5km,sigpac,olive,none
#% answer: sigpac_buffered_3km
#% description: Constrain output map to crop growing area. If olive is used, it is possible to select a threshold for crop harvested area fraction above which mapping will occur.
#% required : yes
#%end

#%option
#% key: cropthreshold
#% type: double
#% answer: 0.20
#% description: Threshold for crop harvested area fraction above which mapping will occur (output will no be mapped below the threshold). Only used with crop=olive.
#% required: yes
#%end

#%option
#% key: alt
#% type: double
#% answer: 1000
#% description: Altitude (meters) above which to clip
#% required: yes
#%end

#%option
#% key: resolution
#% type: string
#% options: 1,2,4
#% answer: 1
#% description: Resolution of output figure (single=1, double=2, quad=4)
#% required: yes
#%end

#%flag
#% key: u
#% description: Use cutting point to mask high values
#%end

#%flag
#% key: c
#% description: Do not interpolate stations above clipping altitude
#%end

#%flag
#% key: r
#% answer: 1
#% description: Write a report with raster statistics
#%end

#%flag
#% key: p
#% answer: 1
#% description: Produce bar chart plots summarizing raster statistics
#%end

#%flag
#% key: t
#% answer: 1
#% description: Save raster output as GeoTIFF
#%end

# Directory with temporary files (see convert.pl script).
DIRTMP="$HOME/models_temp"

# export GRASS_VERBOSE=1

# Cleanup routine.
cleanup()
{
	# Remove temp directory.
	\rm -rf $DIRTMP
    # Remove temp text files.
	\rm -f ~/clipRegion.txt
	\rm -f ~/formula*.txt
	\rm -f ~/voronoi.txt
	\rm -f ~/legend*.txt;
	\rm -f ~/year*.txt;
	\rm -f ~/inputPar.txt;
	\rm -f ~/weather.txt;
	\rm -f ~/customColorRule.txt;
	\rm -f ~/min.txt;
	\rm -f ~/max.txt;
    \rm -f ~/states.txt
	# Remove gis temp files in latlong location
	g.mapset mapset=medgold location=latlong_medgold
	g.mremove -f vect=map*
	# Remove gis temp files in mapping location
    g.mapset mapset=medgold location=laea_andalusia
	g.mremove -f vect=voronoi*
    g.mremove -f vect=selectedStates
	g.mremove -f rast=model* vect=map*
	g.mremove -f rast=model*
	g.mremove -f rast=Mskd*
	g.mremove -f rast=interpol*
    g.mremove -f rast=selectedStatesRaster    
	# Remove old masks.
	g.mremove -f rast=Elev* vect=Eto*
	g.mremove -f rast=Eto*
	g.mremove -f rast=MASK*
}

# In case of user break:
exitprocedure()
{
	echo 'User break!'>&2
	cleanup
	echo 'Cleaning up temporary files...'>&2
	d.mon stop=PNG
	exit 1
}

# Check for user break (signal list: trap -l)
trap 'exitprocedure' 1 2 3 9 15 SIGINT SIGABRT SIGILL SIGTERM

# Print column names of model output files.
perl ~/PerlScripts/printCols.pl "$HOME" > ~/varList.txt

if [ "$1" != "@ARGS_PARSED@" ] ; then
	exec g.parser "$0" "$@"
fi

if test "$GISBASE" = ""; then
	echo 'You must be in GRASS GIS to run this program.' >&2
	exit 1
fi

# Perform initial cleanup.
cleanup

# Set user-defined directory where to save
# output maps.
if [ -n "$GIS_OPT_SAVEDIR" ] ; then
    if [ -d "$HOME/outfiles/$GIS_OPT_SAVEDIR" ] ; then
		echo ""
		echo "The directory \"$GIS_OPT_SAVEDIR\" already exists."
		echo "Please, choose a different name."
		echo ""
		exit 1
	else
		SaveDir="$HOME/outfiles/$GIS_OPT_SAVEDIR"
		mkdir -p "$SaveDir";
	fi
fi

# Set user-defined X, Y, mapping parameter, etc.
if [ -n "$GIS_OPT_LONGITUDE" ] ; then
	LON="$GIS_OPT_LONGITUDE"
fi

if [ -n "$GIS_OPT_LATITUDE" ] ; then
    LAT="$GIS_OPT_LATITUDE"
fi

if [ -n "$GIS_OPT_YEAR" ] ; then
    YEAR="$GIS_OPT_YEAR"
fi

if [ -n "$GIS_OPT_PARAMETER" ] ; then
    PAR="$GIS_OPT_PARAMETER"
fi

if [ -n "$GIS_OPT_INTERPOLATION" ] ; then
    SURF="$GIS_OPT_INTERPOLATION"
fi

if [ -n "$GIS_OPT_NUMPOINTS" ] ; then
    PNTS="$GIS_OPT_NUMPOINTS"
fi

if [ -n "$GIS_OPT_LEGEND1" ] ; then
    LEG1="$GIS_OPT_LEGEND1"
fi

if [ -n "$GIS_OPT_COLORRULEDIVERGENT" ] ; then
    RULE_DIV="$GIS_OPT_COLORRULEDIVERGENT"
fi

if [ -n "$GIS_OPT_COLORRULEREGULAR" ] ; then
    RULE_REG="$GIS_OPT_COLORRULEREGULAR"
fi

if [ -n "$GIS_OPT_LOWBARCOL" ] ; then
    LOWBARCOL="$GIS_OPT_LOWBARCOL"
fi

if [ -n "$GIS_OPT_UPBARCOL" ] ; then
    UPBARCOL="$GIS_OPT_UPBARCOL"
fi

if [ -n "$GIS_OPT_LOWERCUT" ] ; then
	CUT="$GIS_OPT_LOWERCUT"
fi

if [ -n "$GIS_OPT_UPPERCUT" ] ; then
	HICUT="$GIS_OPT_UPPERCUT"
fi

if [ -n "$GIS_OPT_PROVINCES" ] ; then
    PROVINCES="$GIS_OPT_PROVINCES"
fi

if [ -n "$GIS_OPT_CROP" ] ; then
    CROP="$GIS_OPT_CROP"
fi

if [ -n "$GIS_OPT_CROPTHRESHOLD" ] ; then
    CROP_THRESHOLD="$GIS_OPT_CROPTHRESHOLD"
fi

if [ -n "$GIS_OPT_ALT" ] ; then
    ALT="$GIS_OPT_ALT"
fi

if [ -n "$GIS_OPT_RESOLUTION" ] ; then
    FIGRES="$GIS_OPT_RESOLUTION"
fi

# Write LON, LAT, and PAR to a text file as input for the perl script
echo "$LON $LAT $PAR $YEAR">~/inputPar.txt

# Print years to text files for use in legend.
perl ~/PerlScripts/printYear.pl  "$HOME"

# Run a perl script that gets rid of column names
perl ~/PerlScripts/convertITA.pl "$HOME"

# Do we want to use the same legend range for all maps?
if [ "$GIS_FLAG_X" -eq 1 ] ; then
	# In case we want to use divergent color scheme.
	if [ "$GIS_FLAG_D" -eq 1 ] ; then
		# Check if there is an upper cutting point set.
		if [ "$GIS_FLAG_U" -eq 1 ] ; then
			perl ~/PerlScripts/multiColorRule.pl "$HOME" "$RULE_DIV" "$CUT" "$HICUT" "divYes"
		# Otherwise just use the lower cutting point.
		elif [ "$GIS_FLAG_U" -eq 0 ] ; then
			perl ~/PerlScripts/multiColorRule.pl "$HOME" "$RULE_DIV" "$CUT" "na" "divYes"
		fi
	# Same range for all maps with regular color scheme.
	elif [ "$GIS_FLAG_D" -eq 0 ] ; then
		# Check if there is an upper cutting point set.
		if [ "$GIS_FLAG_U" -eq 1 ] ; then
			perl ~/PerlScripts/multiColorRule.pl "$HOME" "$RULE_REG" "$CUT" "$HICUT" "divNo"
		# Otherwise just use the lower cutting point.
		elif [ "$GIS_FLAG_U" -eq 0 ] ; then
			perl ~/PerlScripts/multiColorRule.pl "$HOME" "$RULE_REG" "$CUT" "na" "divNo"
		fi
	fi
fi

# Set environmental variables to import location.
g.mapset mapset=medgold location=latlong_medgold

# Import model output table into a GRASS vector.
cd $DIRTMP;
for i in `ls`; do
	echo "importing $i ...";
    v.in.ascii input=$i output=map$i fs='\t' x=1 y=2 z=0    

    # Check for column type of parameter to map.
    if [ -n "`v.info -c map=map$i | grep dbl_3`" ] ; then
        varType=dbl_3
    else
        varType=int_1
    fi	
done

# Change to GRASS location where projected maps are.
g.mapset mapset=medgold location=laea_andalusia

# Selection of based on vector areas.
if [ "$PROVINCES" = 'all' ] ; then
	# Full region for the Andalusia mapping routine
	g.region vect=andalusia_provinces
	v.to.rast input=andalusia_provinces output=EtoSelectMask use=val value=1
	# Make some room on the margins
	g.region n=n+7000 s=s-7000 e=e+7000 w=w-7000
	# Align with resolution
	g.region -a res=1000    
else 
    # Set region to an arbitrary subset of provinces
    echo $PROVINCES>~/states.txt
    perl ~/PerlScripts/cliparse_TC.pl "$HOME" 'iso_3166_2' 'string' "states.txt" "formulaStates.txt"
    v.extract input=andalusia_provinces output=selectedStates\
        where="`cat ~/formulaStates.txt`"    
    # Define the extent of the map and its grid resolution (currently 1 km).
    g.region -a vect=selectedStates
    v.to.rast input=selectedStates output=EtoSelectMask use=val value=1
    # Make some room on the margins.
	g.region n=n+7000 s=s-7000 e=e+7000 w=w-7000
	# Align with resolution
	g.region -a res=1000
fi

# Use various olive growing areas for masking model output
if [ "$CROP" == "olive" ]; then
	r.mapcalc ElevMask = "if ((EtoSelectMask && olive_HarvestedAreaFraction_andalusia > $CROP_THRESHOLD), elevation_1KMmd_GMTEDmd_andalusia, null())"
	r.mapcalc ElevAltMask = "if (ElevMask < $ALT, ElevMask, null())"
# Use SIGPAC olive monocolture data (resampled at 3 km)
elif [ "$CROP" == "sigpac" ]; then	
	r.mapcalc ElevMask = "if ((EtoSelectMask && olive_monoculture_sigpac_2018_3km == 1), elevation_1KMmd_GMTEDmd_andalusia, null())"
	r.mapcalc ElevAltMask = "if (ElevMask < $ALT, ElevMask, null())"
# Use SIGPAC olive monocolture data (r.grow with 5km buffer radius)
elif [ "$CROP" == "sigpac_buffered_5km" ]; then	
	r.mapcalc ElevMask = "if ((EtoSelectMask && olive_monoculture_sigpac_2018_grow_5000 == 1), elevation_1KMmd_GMTEDmd_andalusia, null())"
	r.mapcalc ElevAltMask = "if (ElevMask < $ALT, ElevMask, null())"
# Use SIGPAC olive monocolture data (r.grow with 3km buffer radius)
elif [ "$CROP" == "sigpac_buffered_3km" ]; then	
	r.mapcalc ElevMask = "if ((EtoSelectMask && olive_monoculture_sigpac_2018_grow_3000 == 1), elevation_1KMmd_GMTEDmd_andalusia, null())"
	r.mapcalc ElevAltMask = "if (ElevMask < $ALT, ElevMask, null())"
# Use no mask for model output
elif [ "$CROP" == "none" ]; then
	r.mapcalc ElevMask = 'if (EtoSelectMask, elevation_1KMmd_GMTEDmd_andalusias, null())'
	r.mapcalc ElevAltMask = "if (ElevMask < $ALT, ElevMask, null())"	
fi

# Write header in the log file.
echo "This log reports names of input files used for analysis:" | tee -a "$SaveDir"/"${LEG1}".log

# Retrieve range min and max values for possible use in legend drawing.
# Maybe check if the files exists...
abs_min=`cat ~/min.txt`
abs_max=`cat ~/max.txt`

# Set size of output image.
cd $DIRTMP
eval `g.region -g`
export GRASS_WIDTH=$(( $cols * FIGRES ))
export GRASS_HEIGHT=$(( ( $rows * 137 * FIGRES ) / 100 ))
export GRASS_PNG_READ=TRUE
export GRASS_RENDER_IMMEDIATE=TRUE
export GRASS_TRUECOLOR=TRUE
# Choose a font for figure text.
export GRASS_FONT='arial'
mapcycle=1 # this is just a counter
# Start interpolation process.
for i in `ls`; do
	# Reproject imported model vectors to current location.
    echo "reprojecting map$i ..."
    v.proj input=map$i location=latlong_medgold mapset=medgold\
		output=map$i		
        
    # Add a column to vector containing altitudes uploaded from raster DEM.
    v.db.addcol map=map$i columns="elevation INT"
    v.what.rast vector=map$i raster=elevation_1KMmd_GMTEDmd_andalusia column="elevation"    
    
    # Extract vector points greater than cutting point, since
    # some values (e.g., bloom day <= 0) may be of little or no meaning.
	if [ "$GIS_FLAG_C" -eq 1 ] ; then
		if [ "$GIS_FLAG_U" -eq 1 ] ; then
			# Do not use points > altitude and >= upper cutting point for interpolation.
			v.extract input=map$i output=mapPos$i \
				where="($varType >= $CUT) AND ($varType <= $HICUT) AND (elevation < $ALT)"
		else
			# Exclude from interpolation only points > altitude cutting point.
			v.extract input=map$i output=mapPos$i \
				where="($varType >= $CUT) AND (elevation < $ALT)"
		fi
	elif [ "$GIS_FLAG_C" -eq 0 ] ; then
		if [ "$GIS_FLAG_U" -eq 1 ] ; then
			# Use only upper and lower cutting points - no exclusion based on altitude.
			v.extract input=map$i output=mapPos$i \
				where="($varType >= $CUT) AND ($varType <= $HICUT)"
		else
			# Use only lower cutting point - no exclusion based on altitude.
			v.extract input=map$i output=mapPos$i \
				where="($varType >= $CUT)"
		fi
	fi

    # Extract points lower than cutting point to map them with a different symbol. 
    v.extract input=map$i output=mapZero$i \
        where="($varType < $CUT)"
	
    # Extract points higher than upper cutting point to map them with a different symbol. 
    v.extract input=map$i output=mapHigh$i \
        where="($varType > $HICUT)"
	
	# Obtain Voronoi polygons from points to mask values
	#  above/below cutting points and select the right polygons.
	v.voronoi input=map$i output=voronoi
	v.category option=print input=mapZero$i > ~/voronoi.txt
	# Check if high values are to be masked.
	if [ "$GIS_FLAG_U" -eq 1 ] ; then
		v.category option=print input=mapHigh$i >> ~/voronoi.txt
	fi
	perl ~/PerlScripts/voroparse.pl  "$HOME"
	#~ v.extract input=voronoi output=voronoiSel\
        #~ where="`cat ~/voronoiFormula.txt`"
    # Version without DB query.
	v.extract input=voronoi output=voronoiSel\
        file=~/voronoi.txt
		
	# Transform selected Voronoi polygons to raster for masking.
	v.to.rast input=voronoiSel output=MskdBuffer$i use=val value=1 
    
    # Set mask for interpolation.
    g.copy rast=ElevAltMask,MASK
	
	if [ $SURF == "idw" ] ; then
        # Interpolate the reprojected vector after proper masking by
        # elevation and administrative regions.
        # v.to.rast may be appropriate with PROTHEUS data.
        v.surf.idw -n input=mapPos$i output=interpol$i npoints=$PNTS layer=1 col=$varType # Removed -n flag
    else
        # https://lists.osgeo.org/pipermail/grass-user/2010-February/054868.html
        v.surf.bspline input=mapPos$i raster=interpolRaw$i sie=15000 sin=15000 method=bicubic lambda_i=0.01 layer=1 column=$varType
        
		# Constrain interpolated raster within max-min from vector input
		# and make values >max or <min equal to max or min.
		eval `v.univar -g -e map=mapPos$i type=point column=$varType`
		r.mapcalc interpolMin$i = "if(interpolRaw$i >= $min, interpolRaw$i, $min)"
		r.mapcalc interpolMinMax$i = "if(interpolMin$i <= $max, interpolMin$i, $max)"
		
		# Clip for altitude
		r.mapcalc interpol$i = "if(ElevAltMask, interpolMinMax$i, null())"
    fi
    
	# Remove MASK that would otherwise prevent full map display.
	g.remove rast=MASK

    # Remove stuff outside cutting points from interpolated raster.
    if [ -n "`cat ~/voronoi.txt`" ]; then
		r.mapcalc MskdBufRev$i = "if(isnull(MskdBuffer$i), 1, null())"
		r.mapcalc MskdModPOS$i = "if(MskdBufRev$i, interpol$i, null())"
    else
    	g.copy rast=interpol$i,MskdModPOS$i
    fi
		
    # Set png file for output.
    GRASS_PNGFILE="$SaveDir"/"$i".png
    export GRASS_PNGFILE
    d.erase color=white

    # Remove voronoi-related stuff.
	\rm -f ~/voronoi*.txt
	g.mremove -f vect=voronoi*

	# If flag -g is checked, output is a greyscale figure 
	if [ "$GIS_FLAG_G" -eq 1 ] ; then
		# Set color table for interpolated raster
		# Do we want to use the same legend range for all maps?
		# No way to find a suitable divergent grayscale palette...
		# ...using color palettes (just a stub).
		if [ "$GIS_FLAG_X" -eq 1 ] ; then
            if [ "$GIS_FLAG_E" -eq 1 ] ; then
                if  [ "$GIS_FLAG_L" -eq 1 ] ; then
                    cat ~/customColorRule.txt | r.colors -e -g map=MskdModPOS$i color=rules
                else
                    cat ~/customColorRule.txt | r.colors -e map=MskdModPOS$i color=rules
                fi
            else
                if  [ "$GIS_FLAG_L" -eq 1 ] ; then
                    cat ~/customColorRule.txt | r.colors -g map=MskdModPOS$i color=rules
                else
                    cat ~/customColorRule.txt | r.colors map=MskdModPOS$i color=rules
                fi
            fi
		else
            if [ "$GIS_FLAG_E" -eq 1 ] ; then
                if  [ "$GIS_FLAG_L" -eq 1 ] ; then
                    cat ~/greyColorRule | r.colors -e -g map=MskdModPOS$i color=rules
                else
                    cat ~/greyColorRule | r.colors -e map=MskdModPOS$i color=rules
                fi
            else
                if  [ "$GIS_FLAG_L" -eq 1 ] ; then
                    cat ~/greyColorRule | r.colors -g map=MskdModPOS$i color=rules
                else
                    cat ~/greyColorRule | r.colors map=MskdModPOS$i color=rules
                fi
            fi
		fi
		d.rast -o map=MskdModPOS$i;
        d.vect map=ne_10m_coastline_andalusia type=boundary color=150:150:150 width=3
		d.vect map=ne_10m_admin_0_countries_lakes_andalusia type=boundary color=128:128:128 width=3
		d.vect map=andalusia_provinces type=boundary color=white width=6
		d.vect map=andalusia_provinces type=boundary color=black width=2
		d.vect map=andalusia type=boundary width=3
        d.grid -wn size=1:0:0 color=black bordercolor=black # This draws a black border
	else
		# If flag -g is not checked, output is a color figure 
		# Set color table for interpolated raster
		if [ "$GIS_FLAG_X" -eq 1 ] || [ "$GIS_FLAG_D" -eq 1 ] ; then
            if [ "$GIS_FLAG_E" -eq 1 ] ; then
                if  [ "$GIS_FLAG_L" -eq 1 ] ; then
                    cat ~/customColorRule.txt | r.colors -e -g map=MskdModPOS$i color=rules
                else
                    cat ~/customColorRule.txt | r.colors -e map=MskdModPOS$i color=rules
                fi
            else
                if  [ "$GIS_FLAG_L" -eq 1 ] ; then
                    cat ~/customColorRule.txt | r.colors -g map=MskdModPOS$i color=rules
                else
                    cat ~/customColorRule.txt | r.colors map=MskdModPOS$i color=rules
                fi
            fi
		else
            if [ "$GIS_FLAG_E" -eq 1 ] ; then
                if  [ "$GIS_FLAG_L" -eq 1 ] ; then
                    cat ~/defaultColorRule | r.colors -e -g map=MskdModPOS$i color=rules
                else
                    cat ~/defaultColorRule | r.colors -e map=MskdModPOS$i color=rules
                fi
            else
                if  [ "$GIS_FLAG_L" -eq 1 ] ; then
                    cat ~/defaultColorRule | r.colors -g map=MskdModPOS$i color=rules
                else
                    cat ~/defaultColorRule | r.colors map=MskdModPOS$i color=rules
                fi
            fi
		fi		
		# Overlay model raster to a shaded relief and add state
		# boundaries, weather stations, etc.
		# Drape model raster over a shaded relief and add state
		# boundaries, lakes, weather stations, etc.
        d.his i=SR_HR_andalusia_clip_250m h=MskdModPOS$i;        
        d.vect map=ne_10m_coastline_andalusia type=boundary color=150:150:150 width=3            
		d.vect map=ne_10m_admin_0_countries_lakes_andalusia type=boundary color=128:128:128 width=3
		d.vect map=andalusia_provinces type=boundary color=white width=6
		d.vect map=andalusia_provinces type=boundary color=black width=2
		d.vect map=andalusia type=boundary width=3
        d.grid -wn size=1:0:0 color=black bordercolor=black # This draws a black border
	fi

	# Display a legend for model raster with screen 
    # coordinates as % of screen (bottom,top,left,right).
	if [ "$GIS_FLAG_A" -eq 1 ] && [ "$GIS_FLAG_X" -eq 1 ] ; then
		d.legend -s map=MskdModPOS$i color=black lines=0\
			thin=1000 labelnum=5 at=6,10,20,80 range="$abs_min","$abs_max"; # absolute range.
    # Restrict width of color legend bar.
	elif [ "$GIS_FLAG_W" -eq 1 ] ; then		
		d.legend -s map=MskdModPOS$i color=black lines=0\
			thin=1000 labelnum=5 at=6,11,20,80 range="$LOWBARCOL","$UPBARCOL" # modified range.
	else		
		d.legend -s map=MskdModPOS$i color=black lines=0\
			thin=1000 labelnum=5 at=6,10,20,80
            # legend range relative to current map. Old horizontal legend location 10,13.5,10,90
            # To exclude outliers from legend, the range=min,max option in d.legend
            # needs to be enabled in the GIS script MedPresentClimate using
            # the two whiskers of the R box plot (see boxplot.stats() in R).
	fi
    # It is possible to implement user-defined categories
    # by adding: "use=1000,100,10,0,-10,-100,-1000".
  
    # Display scale bar.
    # d.barscale -l at=50,7

    # Display true type font text in the legend (at x-y, lower-left coordinates).
    echo "$LEG1" > ~/legend1.txt;
    Legend1="`cat ~/legend1.txt`";
    Year="`cat ~/year$mapcycle.txt`";
    echo $Legend1 $Year "($CROP)" > ~/legend1$mapcycle.txt
    
    # Text for legend (at= percentage, [0,0] is lower left).
	d.text size=3 color=black at=5,94 < ~/legend1$mapcycle.txt

    # Save display to .png file.
	d.mon stop=PNG
	
	# Write a log with names of input files.
	echo "$i" | tee -a "$SaveDir"/"$LEG1".log
    
    # Raster statistics based on vector areas (tuned to labeled raster areas)	
	# If flag -r is checked, then write raster statistics.
	if [ "$GIS_FLAG_R" -eq 1 ] ; then
		r.mapcalc MskdModPOS_sigpac$i = "if (olive_monoculture_sigpac_2018 == 1, MskdModPOS$i, null())"
		echo "Raster statistics by province:" | tee -a "$SaveDir"/$i.txt
		echo "" | tee -a "$SaveDir"/$i.txt
		# need to implement this by developing a raster with state categories
		# currently only works on output raster using 4 steps
		r.report -en map=andalusia_provinces,MskdModPOS_sigpac$i units=k,c,p nsteps=4 | tee -a "$SaveDir"/$i.txt
		echo "" | tee -a "$SaveDir"/$i.txt
		echo "-------------------------------------------" | tee -a "$SaveDir"/$i.txt
		echo "" | tee -a "$SaveDir"/$i.txt
		echo "Raster univariate statistics:" | tee -a "$SaveDir"/$i.txt
		echo "" | tee -a "$SaveDir"/$i.txt
		r.univar map=MskdModPOS$i | tee -a "$SaveDir"/$i.txt
		echo "" | tee -a "$SaveDir"/$i.txt
		echo "-------------------------------------------" | tee -a "$SaveDir"/$i.txt
		echo "" | tee -a "$SaveDir"/$i.txt
		echo "Vector univariate statistics:" | tee -a "$SaveDir"/$i.txt
		echo "" | tee -a "$SaveDir"/$i.txt
		v.univar -e map=mapPos$i type=point column=$varType | tee -a "$SaveDir"/$i.txt
		echo "" | tee -a "$SaveDir"/$i.txt
		echo "-------------------------------------------" | tee -a "$SaveDir"/$i.txt
		echo "" | tee -a "$SaveDir"/$i.txt
		wait
		if [ "$mapcycle" -eq 1 ] ; then
			echo 'There is no stat report for weather stations!' > "$SaveDir"/WeatherStations.txt
			if [ "$GIS_FLAG_P" -eq 1 ] ; then
				Plots=1
			else
				Plots=0
			fi
		fi
	else
		if [ "$mapcycle" -eq 1 ] ; then
			echo 'There is no stat report for weather stations!' > "$SaveDir"/WeatherStations.txt
			if [ "$GIS_FLAG_P" -eq 1 ] ; then
				Plots=1
			else
				Plots=0
			fi
		fi
		echo 'Sorry, no stat report was requested for this analysis.' > "$SaveDir"/$i.txt	
	fi
	
	# If flag -p is checked, then write .rep report files to be plotted.
	if [ "$GIS_FLAG_P" -eq 1 ] ; then
		# Not working for now since r.stats is buggy -- TO BE IMPLEMENTED IN R
		#~ r.stats -anr input=MskdModPOS$i fs=tab nsteps=4>"$SaveDir"/$i.tot
		#~ r.stats -anr input=regioni_istat,MskdModPOS$i fs=tab nsteps=4>"$SaveDir"/$i.rep
        GRASS_PNGFILE="$SaveDir"/"$i"-HIST.png
        export GRASS_PNGFILE
        d.erase color=white
		d.histogram map="MskdModPOS$i"
        d.mon stop=PNG
		# d.out.file output="$SaveDir"/"$i"-HIST res=$FIGRES format=png
        #~ d.out.file output="$SaveDir"/"$i"-HIST res=$FIGRES format=eps        
	fi
	
    # Remove temporary ascii files produced by PERL script "convert.pl".
    rm $i

    let mapcycle++;
done

# Write full command line to log.
echo "GIS script syntax used:
    
	map.pbdm.andalusia 
	w=$GIS_FLAG_W g=$GIS_FLAG_G l=$GIS_FLAG_L x=$GIS_FLAG_X
    a=$GIS_FLAG_A d=$GIS_FLAG_D u=$GIS_FLAG_U c=$GIS_FLAG_C
	r=$GIS_FLAG_R p=$GIS_FLAG_P
	SaveDir=$SaveDir longitude=$LON latitude=$LAT year=$YEAR 
	parameter=$PAR interpolation=$SURF numpoints=$PNTS
	lowercut=$CUT uppercut=$HICUT legend1=$LEG1 provinces=$PROVINCES
	alt=$ALT resolution=$FIGRES lowBarCol=$LOWBARCOL upBarCol=$UPBARCOL 
	crop=$CROP crop_threshold=$CROP_THRESHOLD" | tee -a "$SaveDir"/"${LEG1}".log

# Write date in the log file.
echo "(`date -R | tr -s ' ' ' '`)" | tee -a "$SaveDir"/"${LEG1}".log

# Display & save a map with weather stations used for analysis
# or simply a map with major geographic features of the area.
# If flag -g is checked, output is a greyscale figure (no lakes)
if [ "$GIS_FLAG_G" -eq 1 ] ; then
    # Set png file for output.
    GRASS_PNGFILE="$SaveDir"/WeatherStations.png
    export GRASS_PNGFILE
    d.erase color=white    
    d.rast map=GRAY_HR_SR_OB_DR_andalusia_250m
    d.vect map=ne_10m_coastline_andalusia type=boundary color=150:150:150 width=3
	d.vect map=ne_10m_admin_0_countries_lakes_andalusia type=boundary color=128:128:128 width=3
	d.vect map=andalusia_provinces type=boundary color=white width=6
	d.vect map=andalusia_provinces type=boundary color=black width=2
	d.vect map=andalusia type=boundary width=3
    d.grid -w size=1:0:0 origin=0,0 color=grey bordercolor=black textcolor=black fontsize=15
	#~ d.out.file output="$SaveDir"/WeatherStations res=$FIGRES format=png
    #~ d.out.file output="$SaveDir"/WeatherStations res=$FIGRES format=eps
    d.barscale -s at=7,7    
    d.mon stop=PNG
else
	# If flag -g is not checked, output is a color figure (with lakes)
    # Set png file for output.
    GRASS_PNGFILE="$SaveDir"/WeatherStations.png
    export GRASS_PNGFILE
    d.erase color=white    
    r.mapcalc selectedStates.composite = 'if(EtoSelectMask, NE1_HR_LC_SR_W_DR.composite_andalusia_250m, null())'
    r.colors map=selectedStates.composite raster=NE1_HR_LC_SR_W_DR.composite_andalusia_250m
    d.his i=SR_HR_andalusia_clip_250m h=selectedStates.composite brighten=5
    d.vect map=ne_10m_coastline_andalusia type=boundary color=150:150:150 width=3
	d.vect map=ne_10m_admin_0_countries_lakes_andalusia type=boundary color=128:128:128 width=3
	d.vect map=andalusia_provinces type=boundary color=white width=6
	d.vect map=andalusia_provinces type=boundary color=black width=2
	d.vect map=andalusia type=boundary width=3
    d.grid -w size=1:0:0 origin=0,0 color=grey bordercolor=black textcolor=black fontsize=15  
	#~ d.out.file output="$SaveDir"/WeatherStations res=$FIGRES format=png
    #~ d.out.file output="$SaveDir"/WeatherStations res=$FIGRES format=eps
    
    # Display scale bar.
    d.barscale -s at=7,7    
    d.mon stop=PNG
fi

# Set default value with no upper cutting point.
if [ "$GIS_FLAG_U" -eq 0 ] ; then
	HICUT='none';
fi

# Let HTML summary know if stations above altitude
# clip have been used in interpolation or not.
if [ "$GIS_FLAG_C" -eq 0 ] ; then
	SurfCut='yes';
else
	SurfCut='no';
fi

# Write html pages.
perl ~/PerlScripts/HtmlSum.pl "$SaveDir" "${LEG1}" "$PAR" "$CUT" "$HICUT" "$ALT" "$SurfCut" "$STATES" "$Plots";
# If flag -p is checked, then make barchart plots.
if [ "$GIS_FLAG_P" -eq 1 ] ; then
	#~ perl ~/PerlScripts/makePlotData.pl "$SaveDir"
	#~ perl ~/PerlScripts/HtmlPlotA_ita.pl "$SaveDir" "$LEG1 $LEG2";
	#~ perl ~/PerlScripts/HtmlPlotB.pl "$SaveDir" "$LEG1 $LEG2";
	perl ~/PerlScripts/HtmlPlotC.pl "$SaveDir" "${LEG1}";
fi

# One may want to save palette used for analysis.
if [ "$GIS_FLAG_G" -eq 1 ] ; then
    if [ "$GIS_FLAG_X" -eq 1 ] ; then
        cp ~/customColorRule.txt ~/outfiles/$GIS_OPT_SAVEDIR
    else
        cp ~/greyColorRule ~/outfiles/$GIS_OPT_SAVEDIR
    fi
else
    if [ "$GIS_FLAG_X" -eq 1 ] ; then
        cp ~/customColorRule.txt ~/outfiles/$GIS_OPT_SAVEDIR
    else
        cp ~/defaultColorRule ~/outfiles/$GIS_OPT_SAVEDIR
    fi
fi

# How about saving also data used for analysis?
mkdir -p ~/outfiles/$GIS_OPT_SAVEDIR/data/
cp ~/outfiles/*.txt ~/outfiles/$GIS_OPT_SAVEDIR/data/


# Save various raster output files to GeoTIFF
if [ "$GIS_FLAG_T" -eq 1 ] ; then
	for raster_outfile in `g.mlist rast pat="MskdModPOS*"` ; do
		r.out.gdal input=$raster_outfile output=~/outfiles/$GIS_OPT_SAVEDIR/data/${raster_outfile}.tif format=GTiff createopt=compress=lzw;predictor=3
	done
fi

# Set default browser for HTML visual summary.
GRASS_HTML_BROWSER=firefox.exe
# Open HTML visual summary.
firefox.exe "file:///C:/cygwin/home/andy/outfiles/$GIS_OPT_SAVEDIR/${LEG1}.html"

exit 0
