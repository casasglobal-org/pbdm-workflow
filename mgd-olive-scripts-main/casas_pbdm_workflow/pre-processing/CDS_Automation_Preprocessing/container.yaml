AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Resources:
  
  CopernicusLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/copernicus_container_image
  
  FargateCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: FargateCluster
  
  FargateTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Cpu: "2048"
      Memory: "8192"
      EphemeralStorage:
          SizeInGiB: 30
      ExecutionRoleArn: !GetAtt FargateExecutionRole.Arn
      TaskRoleArn: !GetAtt FargateTaskRole.Arn
      ContainerDefinitions:
        - Name: FargateAppContainer
          Image: "662713783319.dkr.ecr.eu-west-1.amazonaws.com/copernicus_container_image:latest" 
          Essential: true
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CopernicusLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
            
  FargateExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: FargateExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:*
                  - logs:*
                  - ecr:*
                Resource: "*"
        
  
  FargateTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: FargateTaskPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: "logs:CreateLogStream"
                Resource: "arn:aws:logs:*:*:*"
              
              - Effect: Allow
                Action:
                  - s3:*
                Resource: "*"
  
  # ScheduledEventRule:
  #   Type: AWS::Events::Rule
  #   Properties:
  #     Description: "Trigger Fargate task on a schedule"
  #     ScheduleExpression: "cron(0 0 25 2 ? *)" 
  #     State: "ENABLED"
  #     Targets:
  #       - Id: "TargetFargateTask"
  #         Arn: !GetAtt FargateCluster.Arn
  #         RoleArn: !GetAtt EventRole.Arn
  #         EcsParameters:
  #           TaskDefinitionArn: !Ref FargateTaskDefinition
  #           TaskCount: 1
          #   LaunchType: FARGATE
          # Input: "{}"
          # NetworkConfiguration:
          #   AwsVpcConfiguration:
          #     AssignPublicIp: "DISABLED"
          #     SecurityGroups:
          #       Fn: : GetAtt:
          #         "ScheduledFargateTaskScheduledTaskDefSecurityGroupE075BC19",
          #         "GroupId"
          #     Subnets:
          #       -
          #       -
          #       -
  
  # EventRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: events.amazonaws.com
  #           Action: sts:AssumeRole
  #     Policies:
  #       - PolicyName: EventExecutionPolicy
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - ecs:RunTask
  #               Resource: !Ref FargateTaskDefinition
  #             - Effect: Allow
  #               Action:
  #                 - iam:PassRole
  #               Resource: !GetAtt FargateExecutionRole.Arn
                # Condition:
                #   StringLikeIfExists:
                #     iam:PassedToService:
                #       - ecs-tasks.amazonaws.com
  
Outputs:
  FargateClusterArn:
    Description: ARN del cluster Fargate
    Value: !GetAtt FargateCluster.Arn
  
  FargateTaskDefinitionArn:
    Description: ARN della definizione del task Fargate
    Value: !Ref FargateTaskDefinition
  
  # ScheduledEventRuleArn:
  #   Description: ARN della regola EventBridge per il trigger del task Fargate
  #   Value: !GetAtt ScheduledEventRule.Arn