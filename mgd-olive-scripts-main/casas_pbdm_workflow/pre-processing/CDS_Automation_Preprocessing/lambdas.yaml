AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  CDSAPIKEY:
    Type: String
    NoEcho: true
  CDSAPIURL:
    Type: String
  S3BUCKET:
    Type: String


Globals:
  Function:
    Timeout: 900
    Runtime: python3.9
    MemorySize: 10240
    EphemeralStorage:
      Size: 10240
    Environment:
      Variables:
        CDS_API_KEY: !Ref CDSAPIKEY
        CDS_API_URL: !Ref CDSAPIURL
        S3_BUCKET_NAME: !Ref S3BUCKET

Resources:

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaS3WritePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Sub 'arn:aws:s3:::${S3BUCKET}/*'
        - PolicyName: LambdaLoggingPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

  CDSrelativehumiditylambda:
    Type: AWS::Serverless::Function
    Metadata:
      Dockerfile: Dockerfile
    Properties:
      Description: Lambda function for CDS API integration
      CodeUri: src/
      Handler: relative_humidity.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      # PackageType: Image

  CDS2mtemperaturelambda:
    Type: AWS::Serverless::Function
    Metadata:
      Dockerfile: Dockerfile
    Properties:
      Description: Lambda function for CDS API integration
      CodeUri: src/
      Handler: 2m_temperature.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn

  CDS10mwindspeedlambda:
    Type: AWS::Serverless::Function
    Metadata:
      Dockerfile: Dockerfile
    Properties:
      Description: Lambda function for CDS API integration
      CodeUri: src/
      Handler: 10m_wind_speed.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn

  CDSsolarradiationfluxlambda:
    Type: AWS::Serverless::Function
    Metadata:
      Dockerfile: Dockerfile
    Properties:
      Description: Lambda function for CDS API integration
      CodeUri: src/
      Handler: solar_radiation_flux.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn

  CDSprecipitationfluxlambda:
    Type: AWS::Serverless::Function
    Metadata:
      Dockerfile: Dockerfile
    Properties:
      Description: Lambda function for CDS API integration
      CodeUri: src/
      Handler: precipitation_flux.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      
Outputs:
  
  LambdaExecutionRoleArn:
    Description: ARN del ruolo IAM per l'esecuzione delle funzioni Lambda
    Value: !GetAtt LambdaExecutionRole.Arn

  CDSrelativehumiditylambdaArn:
    Description: ARN della prima funzione Lambda per il download CDS
    Value: !GetAtt CDSrelativehumiditylambda.Arn

  CDS2mtemperaturelambdaArn:
    Description: ARN della seconda funzione Lambda per il download CDS
    Value: !GetAtt CDS2mtemperaturelambda.Arn

  CDS10mwindspeedlambdaArn:
    Description: ARN della terza funzione Lambda per il download CDS
    Value: !GetAtt CDS10mwindspeedlambda.Arn

  CDSsolarradiationfluxlambdaArn:
    Description: ARN della quarta funzione Lambda per il download CDS
    Value: !GetAtt CDSsolarradiationfluxlambda.Arn

  CDSprecipitationfluxlambdaArn:
    Description: ARN della quinta funzione Lambda per il download CDS
    Value: !GetAtt CDSprecipitationfluxlambda.Arn