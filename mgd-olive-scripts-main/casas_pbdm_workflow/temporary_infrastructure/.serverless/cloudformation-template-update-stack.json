{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "ApiLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/dev-pbdm-lambda-ti-wf"
      }
    },
    "RequestLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/dev-pbdm-lambda-ti-state"
      }
    },
    "ApiLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/dev-pbdm-backend-api/dev/1698424086864-2023-10-27T16:28:06.864Z/dev-pbdm-backend-api.zip"
        },
        "Handler": "functions/api.index",
        "Runtime": "python3.9",
        "FunctionName": "dev-pbdm-lambda-ti-wf",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "sf_arn": {
              "Fn::Sub": "arn:aws:states:eu-west-1:${AWS::AccountId}:stateMachine:dev-mgd-ict-platform-pbdm-sf"
            },
            "cluster_name": "dev-mgd-ict-platform-pbdm-wf-cluster",
            "BUCKET_NAME": "dev-pbdm-workflow",
            "workflow_table": "dev-pbdm-workflow"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "apiRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ApiLogGroup",
        "apiRole"
      ]
    },
    "RequestLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/dev-pbdm-backend-api/dev/1698424086864-2023-10-27T16:28:06.864Z/dev-pbdm-backend-api.zip"
        },
        "Handler": "functions/request-api.state",
        "Runtime": "python3.9",
        "FunctionName": "dev-pbdm-lambda-ti-state",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "BUCKET_NAME": "dev-pbdm-workflow",
            "cluster_name": "dev-mgd-ict-platform-pbdm-wf-cluster",
            "partial_url": "https://s3-eu-west-1.amazonaws.com",
            "sf_partialArn": {
              "Fn::Sub": "arn:aws:states:eu-west-1:${AWS::AccountId}:execution:dev-mgd-ict-platform-pbdm-sf:"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "staterequestrole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "RequestLogGroup",
        "staterequestrole"
      ]
    },
    "ApiLambdaVersionyprZ2jsYcrVyfikB5wNlsMoRdw78yrrFeCauIEoAiNY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ApiLambdaFunction"
        },
        "CodeSha256": "KhRQctnCa0UIxob/B7DQgjoWMTtBGCYdiMhUkbH4CzQ="
      }
    },
    "RequestLambdaVersionaKyOSGZDq4ufFviW7NbAdEdwRMF9bmLow0tzoaQUkA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RequestLambdaFunction"
        },
        "CodeSha256": "KhRQctnCa0UIxob/B7DQgjoWMTtBGCYdiMhUkbH4CzQ="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-dev-pbdm-backend-api",
        "EndpointConfiguration": {
          "Types": [
            "REGIONAL"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceDataset": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "dataset",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceDatasetIdVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceDataset"
        },
        "PathPart": "{id}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceDatasetIdVarWorkflow": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceDatasetIdVar"
        },
        "PathPart": "workflow",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceDatasetIdVarWorkflowWfVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceDatasetIdVarWorkflow"
        },
        "PathPart": "{wf}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceWfVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "{wf}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceWfVarRequest": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceWfVar"
        },
        "PathPart": "request",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodDatasetIdVarWorkflowWfVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceDatasetIdVarWorkflowWfVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodWfVarRequestOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceWfVarRequest"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodDatasetIdVarWorkflowWfVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {
          "method.request.querystring.country": true,
          "method.request.querystring.sdate": true,
          "method.request.querystring.edate": true,
          "method.request.querystring.model": true,
          "method.request.querystring.output_time_interval": true,
          "method.request.path.id": true,
          "method.request.path.wf": true
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceDatasetIdVarWorkflowWfVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ApiLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": [],
        "RequestValidatorId": {
          "Ref": "ApiGatewayDevpbdmbackendapiRequestValidator"
        }
      },
      "DependsOn": [
        "ApiLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodWfVarRequestGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceWfVarRequest"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "RequestLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "RequestLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDevpbdmbackendapiRequestValidator": {
      "Type": "AWS::ApiGateway::RequestValidator",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ValidateRequestBody": true,
        "ValidateRequestParameters": true,
        "Name": "dev-pbdm-backend-api-dev | Validate request body and querystring parameters"
      }
    },
    "ApiGatewayDeployment1698424083088": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodDatasetIdVarWorkflowWfVarOptions",
        "ApiGatewayMethodWfVarRequestOptions",
        "ApiGatewayMethodDatasetIdVarWorkflowWfVarGet",
        "ApiGatewayMethodWfVarRequestGet"
      ]
    },
    "ApiLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ApiLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "RequestLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RequestLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "mydynamodbTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "dev-pbdm-workflow",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        }
      }
    },
    "MySQSQueue": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "dev-pbdm-ti-workflow",
        "DelaySeconds": 0,
        "MaximumMessageSize": 1024,
        "MessageRetentionPeriod": 345600,
        "ReceiveMessageWaitTimeSeconds": 20,
        "VisibilityTimeout": 30
      }
    },
    "apiRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "dev-pbdm-backend-api-lambda-ti-role",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "dev-pbdm-backend-api-lambda-ti-policy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject",
                    "s3:PutObject"
                  ],
                  "Resource": [
                    "arn:aws:s3:::dev-pbdm-workflow/*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "states:StartExecution"
                  ],
                  "Resource": {
                    "Fn::Sub": "arn:aws:states:eu-west-1:${AWS::AccountId}:stateMachine:dev-mgd-ict-platform-pbdm-sf"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cognito-identity:ListIdentityPools",
                    "cognito-sync:GetCognitoEvents",
                    "cognito-sync:SetCognitoEvents"
                  ],
                  "Resource": [
                    "arn:aws:cognito-idp:eu-west-1:284176251738:userpool/eu-west-1_owfEtSFcp"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Scan"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:dynamodb:eu-west-1:${AWS::AccountId}:table/dev-workflow"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:*"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:sqs:eu-west-1:${AWS::AccountId}:dev-mgd-ict-platform-workflow"
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "staterequestrole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "dev-pbdm-backend-api-state-request-ti-role",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "dev-pbdm-backend-api-state-request-policy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "states:DescribeExecution"
                  ],
                  "Resource": {
                    "Fn::Sub": "arn:aws:states:eu-west-1:${AWS::AccountId}:execution:dev-mgd-ict-platform-pbdm-sf:*"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject"
                  ],
                  "Resource": [
                    "arn:aws:s3:::dev-pbdm-workflow/*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cognito-identity:ListIdentityPools",
                    "cognito-sync:GetCognitoEvents",
                    "cognito-sync:SetCognitoEvents"
                  ],
                  "Resource": [
                    "arn:aws:cognito-idp:eu-west-1:284176251738:userpool/eu-west-1_owfEtSFcp"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "ec2role": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "dev-pbdm-backend-api-ec2-ti-role",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "dev-pbdm-backend-api-ec2-policy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject",
                    "s3:PutObject",
                    "s3:PutObjectAcl"
                  ],
                  "Resource": [
                    "arn:aws:s3:::dev-pbdm-workflow/*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:DeleteMessage",
                    "sqs:ReceiveMessage"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:sqs:eu-west-1:${AWS::AccountId}:dev-mgd-ict-platform-workflow"
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsSupport": true,
        "EnableDnsHostnames": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": "dev-pbdm-vpc-wf"
          }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway"
    },
    "VPCGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "SubnetA": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": "eu-west-1a",
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "10.0.0.0/24",
        "MapPublicIpOnLaunch": true
      }
    },
    "RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "InternetRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": [
        "InternetGateway"
      ],
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        },
        "RouteTableId": {
          "Ref": "RouteTable"
        }
      }
    },
    "SubnetARouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTable"
        },
        "SubnetId": {
          "Ref": "SubnetA"
        }
      }
    },
    "InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": "SG",
        "GroupDescription": "SG",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "3389",
            "ToPort": "3389",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": -1,
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "Windows": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": "ami-0782e691e989998df",
        "InstanceType": "t2.medium",
        "KeyName": "pbdm-wf",
        "SubnetId": {
          "Ref": "SubnetA"
        },
        "SecurityGroupIds": [
          {
            "Ref": "InstanceSecurityGroup"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "VolumeSize": 30
            }
          }
        ]
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-dev-pbdm-backend-api-dev-ServerlessDeploymentBucketName"
      }
    },
    "ApiLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ApiLambdaVersionyprZ2jsYcrVyfikB5wNlsMoRdw78yrrFeCauIEoAiNY"
      },
      "Export": {
        "Name": "sls-dev-pbdm-backend-api-dev-ApiLambdaFunctionQualifiedArn"
      }
    },
    "RequestLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RequestLambdaVersionaKyOSGZDq4ufFviW7NbAdEdwRMF9bmLow0tzoaQUkA"
      },
      "Export": {
        "Name": "sls-dev-pbdm-backend-api-dev-RequestLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-dev-pbdm-backend-api-dev-ServiceEndpoint"
      }
    }
  }
}